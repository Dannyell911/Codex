import os
import tempfile
from datetime import datetime
from typing import Optional

from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from bot import Bot
from db import (
    DB_PATH,
    add_transaction,
    create_category,
    delete_category,
    get_balance,
    get_transactions_for_month,
    init_db,
    list_categories,
    update_category,
)
from llm import classify_and_add
from speech import transcribe


MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ üí∞", "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ üí∏"],
        ["–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å üìä", "–û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü üìÖ"],
        ["–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚ûï", "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚úèÔ∏è"],
        ["–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é üóëÔ∏è", "–ü–æ–º–æ—â—å ‚ùì"],
    ],
    resize_keyboard=True,
)


def create_application(token: Optional[str] = None) -> Application:
    """Create a Telegram application using the provided token or `TELEGRAM_TOKEN` env var."""
    if token is None:
        token = os.environ["TELEGRAM_TOKEN"]
    init_db(DB_PATH)
    application = ApplicationBuilder().token(token).build()
    convo = Bot()

    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üòä",
            reply_markup=MAIN_KEYBOARD,
        )

    async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        text = update.message.text

        if context.user_data.get("step") == "category":
            categories = {row["name"]: row["id"] for row in list_categories(DB_PATH)}
            cat_id = categories.get(text)
            if cat_id is None:
                keyboard = ReplyKeyboardMarkup([[name] for name in categories], resize_keyboard=True)
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ üóÇ", reply_markup=keyboard
                )
                return
            context.user_data["category_id"] = cat_id
            context.user_data["step"] = "amount"
            await update.message.reply_text("–°–∫–æ–ª—å–∫–æ? üíµ")
            return

        if context.user_data.get("step") == "amount":
            try:
                amount = float(text.replace(",", "."))
            except ValueError:
                await update.message.reply_text("–ù—É–∂–Ω–∞ —Ü–∏—Ñ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üôÇ")
                return
            add_transaction(
                amount,
                context.user_data["category_id"],
                context.user_data["type"],
                db_path=DB_PATH,
            )
            context.user_data.clear()
            balance = get_balance(DB_PATH)
            await update.message.reply_text(
                f"–ì–æ—Ç–æ–≤–æ! –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ", reply_markup=MAIN_KEYBOARD
            )
            return

        if context.user_data.get("step") == "report":
            try:
                year, month = map(int, text.split("-"))
            except ValueError:
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü –∏–∑ —Å–ø–∏—Å–∫–∞ üôè",
                )
                return
            rows = get_transactions_for_month(year, month, DB_PATH)
            if not rows:
                msg = "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç üì≠"
            else:
                lines = []
                total = 0.0
                for r in rows:
                    sign = -r["amount"] if r["type"] == "expense" else r["amount"]
                    total += sign
                    lines.append(
                        f"{r['timestamp'][:10]} {r['category']}: {sign:+.2f} ‚ÇΩ"
                    )
                lines.append(f"–ò—Ç–æ–≥: {total:+.2f} ‚ÇΩ")
                msg = "\n".join(lines)
            context.user_data.clear()
            await update.message.reply_text(msg, reply_markup=MAIN_KEYBOARD)
            return

        if context.user_data.get("step") == "new_category":
            create_category(text, DB_PATH)
            context.user_data.clear()
            await update.message.reply_text(
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ", reply_markup=MAIN_KEYBOARD
            )
            return

        if context.user_data.get("step") == "rename_select":
            categories = {row["name"]: row["id"] for row in list_categories(DB_PATH)}
            cat_id = categories.get(text)
            if cat_id is None:
                keyboard = ReplyKeyboardMarkup([[name] for name in categories], resize_keyboard=True)
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ üóÇ", reply_markup=keyboard
                )
                return
            context.user_data["cat_id"] = cat_id
            context.user_data["step"] = "rename_name"
            await update.message.reply_text("–ù–æ–≤–æ–µ –∏–º—è? ‚úèÔ∏è")
            return

        if context.user_data.get("step") == "rename_name":
            update_category(context.user_data["cat_id"], text, DB_PATH)
            context.user_data.clear()
            await update.message.reply_text(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ", reply_markup=MAIN_KEYBOARD
            )
            return

        if context.user_data.get("step") == "delete_select":
            categories = {row["name"]: row["id"] for row in list_categories(DB_PATH)}
            cat_id = categories.get(text)
            if cat_id is None:
                keyboard = ReplyKeyboardMarkup([[name] for name in categories], resize_keyboard=True)
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ üóÇ", reply_markup=keyboard
                )
                return
            delete_category(cat_id, DB_PATH)
            context.user_data.clear()
            await update.message.reply_text(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ üóëÔ∏è", reply_markup=MAIN_KEYBOARD
            )
            return

        if text == "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ üí∞":
            context.user_data["type"] = "income"
            context.user_data["step"] = "category"
            categories = list_categories(DB_PATH)
            if not categories:
                create_category("–û–±—â–µ–µ", DB_PATH)
                categories = list_categories(DB_PATH)
            keyboard = ReplyKeyboardMarkup([[c["name"]] for c in categories], resize_keyboard=True)
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞ üí∞", reply_markup=keyboard
            )
            return

        if text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ üí∏":
            context.user_data["type"] = "expense"
            context.user_data["step"] = "category"
            categories = list_categories(DB_PATH)
            if not categories:
                create_category("–û–±—â–µ–µ", DB_PATH)
                categories = list_categories(DB_PATH)
            keyboard = ReplyKeyboardMarkup([[c["name"]] for c in categories], resize_keyboard=True)
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ üí∏", reply_markup=keyboard
            )
            return

        if text == "–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å üìä":
            balance = get_balance(DB_PATH)
            await update.message.reply_text(
                f"–°–µ–π—á–∞—Å: {balance:.2f} ‚ÇΩ", reply_markup=MAIN_KEYBOARD
            )
            return

        if text == "–û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü üìÖ":
            context.user_data["step"] = "report"
            now = datetime.utcnow()
            options = []
            for i in range(6):
                m = now.month - i
                y = now.year
                while m <= 0:
                    m += 12
                    y -= 1
                options.append(f"{y}-{m:02d}")
            keyboard = ReplyKeyboardMarkup([[o] for o in options], resize_keyboard=True)
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü üóì", reply_markup=keyboard
            )
            return

        if text == "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚ûï":
            context.user_data["step"] = "new_category"
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏? üìù")
            return

        if text == "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚úèÔ∏è":
            categories = list_categories(DB_PATH)
            if not categories:
                await update.message.reply_text(
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç üëÄ", reply_markup=MAIN_KEYBOARD
                )
                return
            context.user_data["step"] = "rename_select"
            keyboard = ReplyKeyboardMarkup(
                [[c["name"]] for c in categories], resize_keyboard=True
            )
            await update.message.reply_text(
                "–ß—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å? üóÇ", reply_markup=keyboard
            )
            return

        if text == "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é üóëÔ∏è":
            categories = list_categories(DB_PATH)
            if not categories:
                await update.message.reply_text(
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç üëÄ", reply_markup=MAIN_KEYBOARD
                )
                return
            context.user_data["step"] = "delete_select"
            keyboard = ReplyKeyboardMarkup(
                [[c["name"]] for c in categories], resize_keyboard=True
            )
            await update.message.reply_text(
                "–ß—Ç–æ —É–¥–∞–ª–∏—Ç—å? üóÇ", reply_markup=keyboard
            )
            return

        if text == "–ü–æ–º–æ—â—å ‚ùì":
            await update.message.reply_text(
                "–ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É: –¥–æ—Ö–æ–¥, —Ä–∞—Å—Ö–æ–¥ –∏–ª–∏ –±–∞–ª–∞–Ω—Å. ü§ù"
            )
            return
        try:
            result = classify_and_add(text, DB_PATH)
        except Exception:
            response = convo.respond(text)
            await update.message.reply_text(response)
        else:
            await update.message.reply_text(
                f"{result['amount']:.2f} ‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {result['category']} –∑–∞–ø–∏—Å–∞–Ω–æ ‚úÖ",
                reply_markup=MAIN_KEYBOARD,
            )

    async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Transcribe voice message and process like free text."""
        voice = update.message.voice
        file = await voice.get_file()
        with tempfile.NamedTemporaryFile(suffix=".ogg") as tmp:
            await file.download_to_drive(tmp.name)
            text = await transcribe(tmp.name)
        try:
            result = classify_and_add(text, DB_PATH)
        except Exception:
            response = convo.respond(text)
            await update.message.reply_text(response)
        else:
            await update.message.reply_text(
                f"{result['amount']:.2f} ‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {result['category']} –∑–∞–ø–∏—Å–∞–Ω–æ ‚úÖ",
                reply_markup=MAIN_KEYBOARD,
            )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    return application


def main() -> None:
    app = create_application()
    app.run_polling()


if __name__ == "__main__":
    main()
